@page "/ar"
@page "/en"
@page "/"


@inject IPositionService _positionService
@inject NavigationManager _navManager
@inject IConfiguration _config
<HeaderComponent LanguageChanged="ChangeLanguage" lang=@lang IsMainPage=true>
    <h2> @(_config.GetValue<string>(@lang == "ar" ? "TitleAr" : "TitleEn"))</h2>
</HeaderComponent>

<div class="row g-3">
    @if (Positions != null)
    {
        @foreach (var recruitment in Positions)
        {
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center ">
                        <h5 class="card-title">@recruitment.Value</h5>
                        <button @onclick=@(() =>ViewPosition(recruitment.Id)) class="text-center btn btn-primary">@Localizer.GetUi("ViewPosition")</button>
                    </div>
                </div>
            </div>
        }
    }
</div>
@code {
    public string JobSearch { get; set; }
    public List<KeyValue> Categories { get; set; }
    public List<KeyValue> Positions { get; set; }
    public string? lang { get; set; }
    protected async override Task OnInitializedAsync()
    {
        lang = _navManager.Uri.Contains("en") ? "en" : "ar";
        Positions = await _positionService.GetAvailablePositions();
        await base.OnInitializedAsync();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }
    public void ViewPosition(decimal departmentPositionId)
    {
        
        var link = _positionService.GeneratePositionLink(departmentPositionId);
        _navManager.NavigateTo($"/{lang}/RecruitmentInfo/{link}");
    }
    public async Task ChangeLanguage(string newlang)
    {
        lang = newlang;
        StateHasChanged();
    }
}
